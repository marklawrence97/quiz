{"version":3,"sources":["components/UserInput/UserInput.js","containers/Register/Register.js","App.js","serviceWorker.js","index.js"],"names":["UserInput","name","stateName","stateVal","handleChange","type","includes","className","htmlFor","value","onChange","Register","state","username","fname","lname","password","password2","email","handleUserNameInput","event","setState","target","handleEmailInput","handleFnameInput","handleLnameInput","handlePasswordInput","handlePassword2Input","this","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oOAwBeA,G,MAtBG,SAAC,GAA+C,IAA9CC,EAA6C,EAA7CA,KAAMC,EAAuC,EAAvCA,UAAWC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,aAEvCC,EAAOH,EAMX,OAJIA,EAAUI,SAAS,cACnBD,EAAO,YAIP,yBAAKE,UAAU,SACX,2BAAOC,QAASN,GAAYD,EAA5B,KACA,2BACIM,UAAU,cACVF,KAAMA,EACNJ,KAAMC,EACNO,MAAON,EACPO,SAAUN,OC2FXO,E,4MAxGXC,MAAQ,CACJC,SAAU,GACVC,MAAO,GACPC,MAAO,GACPC,SAAU,GACVC,UAAW,GACXC,MAAO,I,EAGXC,oBAAsB,SAACC,GACnB,EAAKC,SAAS,CACVR,SAAUO,EAAME,OAAOb,S,EAI/Bc,iBAAmB,SAACH,GAChB,EAAKC,SAAS,CACVH,MAAOE,EAAME,OAAOb,S,EAI5Be,iBAAmB,SAACJ,GAChB,EAAKC,SAAS,CACVP,MAAOM,EAAME,OAAOb,S,EAI5BgB,iBAAmB,SAACL,GAChB,EAAKC,SAAS,CACVN,MAAOK,EAAME,OAAOb,S,EAI5BiB,oBAAsB,SAACN,GACnB,EAAKC,SAAS,CACVL,SAAUI,EAAME,OAAOb,S,EAI/BkB,qBAAuB,SAACP,GACpB,EAAKC,SAAS,CACVJ,UAAWG,EAAME,OAAOb,S,uDAK5B,OACI,yBAAKF,UAAU,aACX,yBAAKA,UAAU,YACf,yBAAKA,UAAU,YACf,6CAAkB,0BAAMA,UAAU,aAAhB,aAClB,yBAAKA,UAAU,cACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,UACX,kBAAC,EAAD,CACIN,KAAK,WACLC,UAAU,WACVC,SAAUyB,KAAKhB,MAAMC,SACrBT,aAAcwB,KAAKT,sBAEvB,kBAAC,EAAD,CACIlB,KAAK,QACLC,UAAU,QACVC,SAAUyB,KAAKhB,MAAMM,MACrBd,aAAcwB,KAAKL,mBAEvB,kBAAC,EAAD,CACItB,KAAK,aACLC,UAAU,QACVC,SAAUyB,KAAKhB,MAAME,MACrBV,aAAcwB,KAAKJ,mBAEvB,kBAAC,EAAD,CACIvB,KAAK,YACLC,UAAU,QACVC,SAAUyB,KAAKhB,MAAMG,MACrBX,aAAcwB,KAAKH,mBAEvB,kBAAC,EAAD,CACIxB,KAAK,WACLC,UAAU,WACVC,SAAUyB,KAAKhB,MAAMI,SACrBZ,aAAcwB,KAAKF,sBAEvB,kBAAC,EAAD,CACIzB,KAAK,kBACLC,UAAU,YACVC,SAAUyB,KAAKhB,MAAMK,UACrBb,aAAcwB,KAAKD,wBAG3B,yBAAKpB,UAAU,mBACX,4BAAQA,UAAU,SAASF,KAAK,UAAhC,YAGA,0E,GAhGLwB,IAAMC,WCKdC,MANf,WACE,OACE,kBAAC,EAAD,OCOgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ef068c23.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst UserInput = ({name, stateName, stateVal, handleChange}) => {\r\n\r\n    let type = stateName\r\n\r\n    if (stateName.includes(\"password\")) {\r\n        type = \"password\"\r\n    }\r\n\r\n    return(\r\n        <div className=\"field\">\r\n            <label htmlFor={stateName}>{name}:</label>\r\n            <input \r\n                className=\"field-input\" \r\n                type={type} \r\n                name={stateName}\r\n                value={stateVal}\r\n                onChange={handleChange}>\r\n            </input>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserInput","import React from 'react'\r\nimport './Register.css'\r\nimport UserInput from '../../components/UserInput/UserInput'\r\n\r\nclass Register extends React.Component {\r\n    state = {\r\n        username: \"\",\r\n        fname: \"\",\r\n        lname: \"\",\r\n        password: \"\",\r\n        password2: \"\",\r\n        email: \"\"\r\n    }\r\n\r\n    handleUserNameInput = (event) => {\r\n        this.setState({\r\n            username: event.target.value\r\n        })\r\n    }\r\n\r\n    handleEmailInput = (event) => {\r\n        this.setState({\r\n            email: event.target.value\r\n        })\r\n    }\r\n\r\n    handleFnameInput = (event) => {\r\n        this.setState({\r\n            fname: event.target.value\r\n        })\r\n    } \r\n\r\n    handleLnameInput = (event) => {\r\n        this.setState({\r\n            lname: event.target.value\r\n        })\r\n    } \r\n\r\n    handlePasswordInput = (event) => {\r\n        this.setState({\r\n            password: event.target.value\r\n        })\r\n    } \r\n\r\n    handlePassword2Input = (event) => {\r\n        this.setState({\r\n            password2: event.target.value\r\n        })\r\n    } \r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"circle1\"></div>\r\n                <div className=\"circle2\"></div>\r\n                <h1>start quizing <span className=\"emphasise\">today...</span></h1>\r\n                <div className=\"background\">\r\n                    <div className=\"formContainer\">\r\n                        <div className=\"fields\">\r\n                            <UserInput \r\n                                name=\"Username\"\r\n                                stateName=\"username\"\r\n                                stateVal={this.state.username}\r\n                                handleChange={this.handleUserNameInput}\r\n                            />\r\n                            <UserInput \r\n                                name=\"Email\"\r\n                                stateName=\"email\"\r\n                                stateVal={this.state.email}\r\n                                handleChange={this.handleEmailInput}\r\n                            />\r\n                            <UserInput \r\n                                name=\"First Name\"\r\n                                stateName=\"fname\"\r\n                                stateVal={this.state.fname}\r\n                                handleChange={this.handleFnameInput}\r\n                            />\r\n                            <UserInput \r\n                                name=\"Last Name\"\r\n                                stateName=\"lname\"\r\n                                stateVal={this.state.lname}\r\n                                handleChange={this.handleLnameInput}\r\n                            />\r\n                            <UserInput \r\n                                name=\"Password\"\r\n                                stateName=\"password\"\r\n                                stateVal={this.state.password}\r\n                                handleChange={this.handlePasswordInput}\r\n                            />\r\n                            <UserInput \r\n                                name=\"Repeat Password\"\r\n                                stateName=\"password2\"\r\n                                stateVal={this.state.password2}\r\n                                handleChange={this.handlePassword2Input}\r\n                            />\r\n                        </div>\r\n                        <div className=\"register button\">\r\n                            <button className=\"submit\" type=\"submit\">\r\n                                Register\r\n                            </button>\r\n                            <p>Already a member? Log in instead...</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Register","import React from 'react';\nimport Register from './containers/Register/Register'\n\nfunction App() {\n  return (\n    <Register />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}